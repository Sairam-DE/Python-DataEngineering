{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO8ef9Rhv13RCs6kn6kmOby",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sairam-DE/Python-DataEngineering/blob/main/DAY2.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xxnq-Plg083C"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "source": [
        "#right side binding\n",
        "\n",
        "print(2 ** 3 ** 8)"
      ],
      "metadata": {
        "id": "qK47tRKw68x3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1fe72dc2-7794-4e20-cef6-f8c22e56b094"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11423562217377937432834817564864391054921813476074403186202876186307194708759156620192815736856953160782704625320798799480493785783539071475308181558958409886139180507766255745268835295645117313504338819263740326883325464574267555496207694285869572314648316514329215930122751571464318862255979369772869442140816230512157201729281184157721386877314303827951055243527097308944107496195827273952935604677267766071546533446890697483255207837930462782684172148575680225197203487779905492453075630072358789672398534046574327392486173694016134122557759726226515008486798286901592462027191956990502296836826476904023063730093767352130344242019656202260888892026453895468229206988071920295008873379682446553369924894350070488891702010078541708225795234839095211089097709112162085120097647338122139833228110600082989392591338433777616544053684799646500413069770687086581487137502485652747714529441936196186003229177757067964120330231232040963858808839184289548225605031170276587718715043046407159535959626211055259297605210472194352154412308176378305978722042762270067173474951806087819815154079666858570587012720661422637817709796687416276036064210127293014198595450513696623633614994073435824842954082330215697686198561610404629566074790086569059643951234599817490323492052082224793909497188899924748028310673588762417682527348630665205417209359086662377804683776356513790589272591978956170307165117107589512088595323312169179624851488689039519409637419425694423986296239609301255502738931127000906125692128912846840805341230670024948640174953768772224370653045179249084484537443164603352860688179124388887671769490857961498972552585448374811136545337429493009247982272748138694950049819837487875349582757538405984852225375998205031894594085879229119678150100444102619057722203800499447489455107613497927587194865059674725545869846288173614441578176037582721675130519361949018877981483652351653188988167198715064479729607107795243426756944986254682519699815429352363416415356114173952\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Arithematic operations\n",
        "\n",
        "\n",
        "Movie_bn = 200\n",
        "Movie_vs = 300\n",
        "\n",
        "tickets_sold_bn = 40\n",
        "tickets_sold_vs = 25\n",
        "\n",
        "revenue = Movie_bn * tickets_sold_bn + Movie_vs * tickets_sold_vs\n",
        "print(f\" the revenue is {revenue}\")\n",
        "\n",
        "\n",
        "#finding average\n",
        "\n",
        "avg_revenue = Movie_bn * tickets_sold_bn + Movie_vs * tickets_sold_vs / tickets_sold_vs + tickets_sold_bn\n",
        "\n",
        "print (f\" avg revenue is {avg_revenue}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "awP83GJ76Vn9",
        "outputId": "492644bc-dea0-4bef-c6e6-261267cf76b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " the revenue is 15500\n",
            " avg revenue is 8340.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#when ever there is add , sub or multiply to existing value\n",
        "#we can make that by\n",
        "#example\n",
        "Movie_bn = 200\n",
        "#we should add 50 to above one\n",
        "#hectic method\n",
        "Movie_bn = Movie_bn + 50\n",
        "print(Movie_bn)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4InYXf_97DIa",
        "outputId": "a2ad6c5e-e598-4d90-a9d1-db5d5b6b6b02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "250\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#simple we have\n",
        "Movie_bn = 200\n",
        "Movie_bn+=50\n",
        "print(Movie_bn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OthHIjMR70N9",
        "outputId": "4434faa4-e6e1-4017-e5ee-90c09b7bd0b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "250\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#and in the same way we can perform multiplication\n",
        "Movie_bn = 200\n",
        "Movie_bn*=2\n",
        "print(Movie_bn)\n",
        "\n",
        "#division\n",
        "Movie_bn/=2\n",
        "print(Movie_bn)\n",
        "\n",
        "#power\n",
        "Movie_bn**=3\n",
        "print(Movie_bn)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hc6ZZs5178zW",
        "outputId": "b3a5d9bc-bcc1-4abf-d688-c1d60eda39d3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "400\n",
            "200.0\n",
            "8000000.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#rounding off value to upper, lower and absolute value\n",
        "#so we use ceil from math by importing\n",
        "\n",
        "import math\n",
        "\n",
        "\n",
        "total_revenue = 27000.3\n",
        "\n",
        "#here x in comments say what the value we take for consideration in my case 27000.3\n",
        "print(math.ceil(total_revenue)) # x+1 rounding off the value after point\n",
        "print(math.floor(total_revenue)) # x-1 rounding off the value after point\n",
        "print(math.fabs(total_revenue)) #x give x as x with out any adulteration"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bfqAscrm9P6C",
        "outputId": "ff7ead70-00c9-40f1-ceb3-bca57a934be5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "27001\n",
            "27000\n",
            "27000.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Conditional statements\n",
        "\n",
        "price = int(input(\"enter the price: \"))\n",
        "\n",
        "if price <= 35:\n",
        "  print(\"buy\")\n",
        "else:\n",
        "    print(\"don't buy\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NQqh4nw39Wp5",
        "outputId": "f6873433-d959-4654-9f83-fb2eff5a2445"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the price: 30\n",
            "buy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#taking it to next level\n",
        "\n",
        "\n",
        "price = int(input(\"enter the price: \"))\n",
        "\n",
        "if price <= 35:\n",
        "  if price <= 10:\n",
        "    print(\"you  will be surplus\")\n",
        "\n",
        "  print(\"buy\")\n",
        "else:\n",
        "    print(\"don't buy\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9vfbiarO_Qq-",
        "outputId": "41716d5f-01ec-4c61-fbe7-7b43886d51e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the price: 99\n",
            "don't buy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#now adding elif previous example is nested if where we are having two if's in the same block\n",
        "\n",
        "price = int(input( \"enter the price: \"))\n",
        "if price<= 100:\n",
        "  print(\"buy it\")\n",
        "elif price <= 500  >= 101:\n",
        "  print(\"think of it\")\n",
        "else:\n",
        "  print(\"don't buy it\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7A2EKx5pAz5X",
        "outputId": "2b52d573-b4ba-4fda-a73d-688c30b1aaa1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter the price: 89\n",
            "buy it\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ASSIGNMENT**"
      ],
      "metadata": {
        "id": "kMaOqIwOGiMe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "age = int(input(\"enter age: \"))\n",
        "crime_record = int(input(\"enter crime record: \"))\n",
        "\n",
        "if age >= 18 and crime_record == 0:\n",
        "  print(\"eligible to vote\")\n",
        "else:\n",
        "  print(\"not eligible to vote\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6DTWCSogBoUJ",
        "outputId": "913ffbf7-9783-436d-e40b-010f71ba3b12"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enter age: 33\n",
            "enter crime record: 44\n",
            "not eligible to vote\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Logical operations\n",
        "\n",
        "AND OR NOT\n",
        "First condition\n",
        "\n",
        "\n",
        "COND1 AND COND2 AND COND3 if all these true then only it will be true\n",
        "\n",
        "otherwise it will be false\n",
        "\n",
        "Second condition\n",
        "COND1 OR COND2 OR COND3 checks for atleast one True and give True other wise False will be passed"
      ],
      "metadata": {
        "id": "K_al-a5OGxrg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#First condition\n",
        "\n",
        "print( True and True)\n",
        "print( True and False)\n",
        "print(True or False or False) #second condition"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mdsKut74FfMt",
        "outputId": "9af9d16d-b524-480d-d485-dac41bae72ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Working with strings\n",
        "\n",
        "\n",
        "string = sequence of characters\n",
        "\n",
        "representation of strings\n",
        "\" \",(double quotes) and\n",
        "' ' (single quotes),\n",
        "\"\"\"    \"\"\"(multiple quotes)"
      ],
      "metadata": {
        "id": "t1Ivqa0uJPtz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#working with strings\n",
        "\n",
        "#1\n",
        "quality =  \"marioreddy is thin\"\n",
        "print(quality)\n",
        "#2\n",
        "quality = '\"marioreddy is thin\"'\n",
        "print(quality)\n",
        "#3\n",
        "quality = \"marioreddy\\\"s' is thin\"\n",
        "print(quality)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h5_-g5vsKLph",
        "outputId": "eeeb6799-a4bf-4155-f45a-a9f0b12b5963"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "marioreddy is thin\n",
            "\"marioreddy is thin\"\n",
            "marioreddy\"s' is thin\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#\\ continution\n",
        "name = \"mario \\\n",
        " reddy\"\n",
        "print(name)\n",
        "\n",
        "\n",
        "#\\n new line\n",
        "\n",
        "name = \"mario \\n reddy\"\n",
        "print(name)\n",
        "\n",
        "#\\t give tab space\n",
        "name = \"mario \\t reddy\"\n",
        "print(name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EYOySVBVMiXu",
        "outputId": "37e14240-300d-4753-ffa7-96cbb3e1ee65"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mario  reddy\n",
            "mario \n",
            " reddy\n",
            "mario \t reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#string related operations\n",
        "\n",
        "#concatenation\n",
        "\n",
        "\n",
        "fname = str(input(\"fname: \"))\n",
        "lname = str(input(\"lname: \"))\n",
        "\n",
        "#here + adds both the strings and \" \" ---> gives space\n",
        "\n",
        "full_name = fname + \" \" + lname\n",
        "print(full_name)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gscxoYW0OJKZ",
        "outputId": "d28411af-f07c-4093-e178-d2978b9d0414"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fname: iiiii\n",
            "lname: tttt\n",
            "iiiii tttt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#length of a string\n",
        "engineer = \"data engineer\" #spaces will be counted\n",
        "print(len(engineer))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rtO2BYLvPMDz",
        "outputId": "c4de3170-7a9a-4a59-d502-3e8a8c01fbb5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "13\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#indexing - helps to get a particular character\n",
        "#---> index starts from zero\n",
        "#strings are immutable, you can't make modifications\n",
        "\n",
        "\n",
        "\n",
        "#slicing - helps to get a piece(slice)\n"
      ],
      "metadata": {
        "id": "RsFyz7ftPw8N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"mario_reddy\" #9\n",
        "print(len(name))\n",
        "print(name[3]) # indexing method\n",
        "\n",
        "name = \"mario_reddy\"\n",
        "print(name[0:10]) #in-between values\n",
        "print(name[0:10]) #only those values\n",
        "print(name[6:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5S7SGnvaQrJI",
        "outputId": "2eab8a7b-5eb2-4a02-8778-ba3817959278"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "11\n",
            "i\n",
            "mario_redd\n",
            "mario_redd\n",
            "reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print everything after the underscore and in some cases space\n",
        "\n",
        "index = name.find(\"_\")\n",
        "print(name[index+1:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FXkMONPrggku",
        "outputId": "de42065a-1749-4077-8d60-2f593b499a38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print the first word before underscore or space\n",
        "\n",
        "name = \"mario_reddy\"\n",
        "index = name.find(\"_\")\n",
        "print(name[0:index])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y5mrK1ANhjQQ",
        "outputId": "57ddd753-efe0-4c35-a0f6-ceda73dc03e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mario\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "X124FsRUPwYz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#reversing a string\n",
        "name = \"mario_reddy\"\n",
        "print(name[::-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ch5chqZ7iwVD",
        "outputId": "66d89b76-877b-4a28-dd92-90b7cd5e9f79"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ydder_oiram\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#accessing not existed character\n",
        "name = \"mario_reddy\"\n",
        "print(name.find(\"s\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yFvqRtxoi53c",
        "outputId": "9c626292-ff77-4f34-d481-2446ca0a2b26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#accessing not existed character by using index\n",
        "#it returns the first occurence other wise\n",
        "#it throws a exception\n",
        "name = \"mario_reddy\"\n",
        "print(name.index(\"s\"))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "ZQj2JFfIleSY",
        "outputId": "c3390dc5-70a1-4a5d-c36d-a95f9ebc7ae2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "substring not found",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-453c3b8639ab>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#it throws a exception\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"mario_reddy\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"s\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: substring not found"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"mario_reddy\"\n",
        "print(name.endswith(\"reddy\"))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "196Io4uMmcQA",
        "outputId": "6b6eea70-122c-429e-995b-63acc1d3fcd1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"mario_reddy\"\n",
        "print(name.capitalize())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TPRXDHr2muC6",
        "outputId": "77d4bcf6-f5a1-4e08-8239-554c7d3e0478"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mario_reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#removing the spaces both right side and left side\n",
        "\n",
        "name = \"                mario reddy                     \"\n",
        "print(name.strip())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rcOzS706nNXL",
        "outputId": "817883c8-db7a-4e44-f456-582fb1a7e963"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mario reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"                mario reddy                     \"\n",
        "print(name.lstrip()) #removes left side\n",
        "print(name.rstrip()) #removes right side\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PF1OdJbendHR",
        "outputId": "e8db5a9b-236c-4ef7-9465-b2faada87d4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mario reddy                     \n",
            "                mario reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#replacing\n",
        "\n",
        "name = \"mario_reddy\"\n",
        "print(name.replace(\"mario\", \"marey\")) #first one existing and second one new"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "07z-lXrTn8t8",
        "outputId": "de585b69-c268-491e-cae9-e02429f9a2a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "marey_reddy\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#split use case\n",
        "\n",
        "\n",
        "movie_order = \"20,2020 09 18, 00:00,           Booked     \"\n",
        "print(movie_order[3])\n",
        "\n",
        "\n",
        "\n",
        "#now we use split\n",
        "\n",
        "\n",
        "movie_order_new = movie_order.split()\n",
        "print(movie_order_new)\n",
        "\n",
        "\n",
        "#accessing\n",
        "\n",
        "movie_order_new = movie_order.split(\",\")\n",
        "print(movie_order_new[3])\n",
        "\n",
        "#strip\n",
        "print(movie_order_new[3].strip())\n",
        "\n",
        "#casing upper and lower\n",
        "print(movie_order_new[3].lower().strip())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hdgD_yn9wITX",
        "outputId": "90eab8ce-4d94-48b2-c949-6465260c4051"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "['20,2020', '09', '18,', '00:00,', 'Booked']\n",
            "           Booked     \n",
            "Booked\n",
            "booked\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Oj5lOBus1KAD"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
